<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var entitySuffix = !string.IsNullOrEmpty(Entity.Module) && Entity.Module != Entity.Name ? Entity.Name : string.Empty;
    var entitySuffixAct = !string.IsNullOrEmpty(entitySuffix) ? "/" + LowerFirst(entitySuffix) : string.Empty;
    var module = !string.IsNullOrEmpty(Entity.Module) ? Entity.Module : Entity.Name;
	var keyProperty = Entity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey);
#>
using <#= DomainModel.RestClient #>.Base;
using <#= DomainModel.Dto #>.Base;
using <#= DomainModel.Dto #>.<#= module #>;

namespace <#= DomainModel.RestClient #>
{
    public class <#= module #>RestService : BaseService
    {
        protected override string ApiController => "api/<#= LowerFirst(module) #>";

        public <#= module #>RestService(ServiceOptions options) : base(options)
        {

        }

        public async Task<ResponseDto<Get<#= Entity.Name #>Dto>> Create<#= entitySuffix #>(Create<#= Entity.Name #>Dto createDto)
            => await Post<Create<#= Entity.Name #>Dto, Get<#= Entity.Name #>Dto>(<#= string.IsNullOrEmpty(entitySuffixAct) ? "string.Empty" : "\"" + entitySuffixAct + "\"" #>, createDto)!;

        public async Task<ResponseDto<Get<#= Entity.Name #>Dto>> Update<#= entitySuffix #>(Update<#= Entity.Name #>Dto updateDto)
            => await Put<Update<#= Entity.Name #>Dto, Get<#= Entity.Name #>Dto>(<#= string.IsNullOrEmpty(entitySuffixAct) ? "string.Empty" : "\"" + entitySuffixAct + "\"" #>, updateDto)!;

        public async Task<ResponseDto> Delete<#= entitySuffix #>(<#= keyProperty != null ? keyProperty.Type + " " + LowerFirst(keyProperty.Name) : string.Empty #>)
            => await Delete($"<#= string.IsNullOrEmpty(entitySuffixAct) ? string.Empty : entitySuffixAct #><#= keyProperty != null ? "/{" + LowerFirst(keyProperty.Name) + "}" : string.Empty #>")!;

        public async Task<ResponseDto<Get<#= Entity.Name #>Dto>> Get<#= entitySuffix #>(<#= keyProperty != null ? keyProperty.Type + " " + LowerFirst(keyProperty.Name) : string.Empty #>)
            => await Get<Get<#= Entity.Name #>Dto>($"<#= string.IsNullOrEmpty(entitySuffixAct) ? string.Empty : entitySuffixAct #><#= keyProperty != null ? "/{" + LowerFirst(keyProperty.Name) + "}" : string.Empty #>")!;

        public async Task<ResponseDto<IEnumerable<List<#= Entity.Name #>Dto>>> List<#= entitySuffix #>()
            => await Get<IEnumerable<List<#= Entity.Name #>Dto>>("<#= entitySuffixAct #>/list")!;

        public async Task<ResponseDto<SearchResultDto<Search<#= Entity.Name #>Dto>>> Search<#= entitySuffix #>(SearchParamsDto<Search<#= Entity.Name #>FilterDto> filter)
            => await Post<SearchParamsDto<Search<#= Entity.Name #>FilterDto>, SearchResultDto<Search<#= Entity.Name #>Dto>>("<#= entitySuffixAct #>/search", filter)!;
    }
}
