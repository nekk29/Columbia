<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace <#= DomainModel.Dto #>.<#= Entity.Name #>
{
<#
if (Entity != null)
{
	PushIndent(DefautIndent);
#>
public class Search<#= Entity.Name #>FilterDto
{
<#
	PushIndent(DefautIndent);

	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => x.IsPrimaryKey))
	{
#>
public <#= primitiveProperty.Type #>? <#= primitiveProperty.Name #> { get; set; } = null!;
<#
	}

	PopIndent();
#>
<#
	PushIndent(DefautIndent);

	foreach (var entityProperty in Entity.EntityProperties)
	{
		var relatedEntity = DomainModel.Entities.FirstOrDefault(x => x.Name == entityProperty.Type);
		var relatedEntityKey = relatedEntity != null ? relatedEntity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey) : null;

		if (relatedEntityKey != null)
		{
			var foreignKey = string.IsNullOrEmpty(entityProperty.ForeignKey) ? entityProperty.Name + relatedEntityKey.Name : entityProperty.ForeignKey;
#>
public <#= relatedEntityKey.Type #>? <#= foreignKey #> { get; set; } = null!;
<#
		}
	}

	PopIndent();
	PushIndent(DefautIndent);

	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => !x.IsPrimaryKey))
	{
#>
public <#= primitiveProperty.Type #>? <#= primitiveProperty.Name #> { get; set; } = null!;
<#
	}

	PopIndent();
#>
}
<#
}

ClearIndent();
#>
}
