<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var entity = Entity.Name;
    var entityLower = LowerFirst(entity);
    var entityModule = Entity.Module;
    
    var module = !string.IsNullOrEmpty(entityModule) && entityModule.ToLower() != entity.ToLower()  ? entityModule : entity;
    var moduleLower = LowerFirst(module);

    var entitySuffix = !string.IsNullOrEmpty(entityModule) && entityModule.ToLower() != entity.ToLower() ? entity : string.Empty;
    var entitySuffixLower = LowerFirst(entitySuffix);

	var keyProperty = Entity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey);
	var keyPropertyParam = keyProperty != null ? LowerFirst(keyProperty.Name) : string.Empty;
	var keyPropertyParamIn = keyProperty != null ? $"{keyProperty.Type} {LowerFirst(keyProperty.Name)}" : string.Empty;
	var keyPropertyParamRoute = keyProperty != null ? "{" + LowerFirst(keyProperty.Name) + "}" : string.Empty;

    var createRoute = string.IsNullOrEmpty(entitySuffixLower) ? string.Empty : $"(\"{entitySuffixLower}\")";
    var updateRoute = createRoute;
    var deleteRoute = string.IsNullOrEmpty(entitySuffixLower) ?
        (!string.IsNullOrEmpty(keyPropertyParamRoute) ? $"(\"{keyPropertyParamRoute}\")" : string.Empty) :
        (!string.IsNullOrEmpty(keyPropertyParamRoute) ? $"(\"{entitySuffixLower}/{keyPropertyParamRoute}\")" : $"(\"{entitySuffixLower}\")");
    var getRoute = deleteRoute;
    var listRoute = string.IsNullOrEmpty(entitySuffixLower) ? $"(\"list\")" : $"(\"{entitySuffixLower}/list\")";
    var searchRoute = string.IsNullOrEmpty(entitySuffixLower) ? $"(\"search\")" : $"(\"{entitySuffixLower}/search\")";
#>
using Microsoft.AspNetCore.Mvc;
using <#= DomainModel.ApplicationAbstractions #>;
using <#= DomainModel.Dto #>.Base;
using <#= DomainModel.Dto #>.<#= module #>;

namespace <#= DomainModel.Apis #>.Controllers
{
    [ApiController]
    [Security.Authorize]
    [Route("api/<#= moduleLower #>")]
    public class <#= module #>Controller(I<#= module #>Application <#= moduleLower #>Application)
    {
        [HttpPost<#= createRoute #>]
        public async Task<ResponseDto<Get<#= entity #>Dto>> Create<#= entitySuffix #>(Create<#= entity #>Dto createDto)
            => await <#= moduleLower #>Application.Create<#= entitySuffix #>(createDto);

        [HttpPut<#= updateRoute #>]
        public async Task<ResponseDto<Get<#= entity #>Dto>> Update<#= entitySuffix #>(Update<#= entity #>Dto updateDto)
            => await <#= moduleLower #>Application.Update<#= entitySuffix #>(updateDto);

        [HttpDelete<#= deleteRoute #>]
        public async Task<ResponseDto> Delete<#= entitySuffix #>(<#= keyPropertyParamIn #>)
            => await <#= moduleLower #>Application.Delete<#= entitySuffix #>(<#= keyPropertyParam #>);

        [HttpGet<#= getRoute #>]
        public async Task<ResponseDto<Get<#= entity #>Dto>> Get<#= entitySuffix #>(<#= keyPropertyParamIn #>)
            => await <#= moduleLower #>Application.Get<#= entitySuffix #>(<#= keyPropertyParam #>);

        [HttpGet<#= listRoute #>]
        public async Task<ResponseDto<IEnumerable<List<#= entity #>Dto>>> List<#= entitySuffix #>()
            => await <#= moduleLower #>Application.List<#= entitySuffix #>();

        [HttpPost<#= searchRoute #>]
        public async Task<ResponseDto<SearchResultDto<Search<#= entity #>Dto>>> Search<#= entitySuffix #>(SearchParamsDto<Search<#= entity #>FilterDto> searchParams)
            => await <#= moduleLower #>Application.Search<#= entitySuffix #>(searchParams);
    }
}
