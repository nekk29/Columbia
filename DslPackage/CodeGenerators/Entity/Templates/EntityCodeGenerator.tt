<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<#
if (Entity.IsAuditable)
{
#>
using <#= DomainModel.Entity #>.Base;
<#
}
#>
<#
var relatedEntities = DomainModel.Entities.Where(x => x.EntityProperties.Any(p => p.Type == Entity.Name));
#>

namespace <#= DomainModel.Entity #>
{
<#
if (Entity != null)
{
#>
<#
	PushIndent(DefautIndent);
#>
public class <#= Entity.Name #><#= Entity.IsAuditable ? " : SystemEntity" : string.Empty #>
{
<#
	if (relatedEntities.Any())
	{
		PushIndent(DefautIndent);
#>
public <#= Entity.Name #>()
{
<#
		PushIndent(DefautIndent);

		foreach(var relatedEntity in relatedEntities)
		{
#>
<#= relatedEntity.Name #>s = new HashSet<<#= relatedEntity.Name #>>();
<#
		}

		PopIndent();
#>
}

<#	
		PopIndent();
	}
	
	PushIndent(DefautIndent);

	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => x.IsPrimaryKey))
	{
#>
[Key]
public <#= primitiveProperty.Type #> <#= primitiveProperty.Name #> { get; set; }<#= primitiveProperty.Type == "string" ? " = null!;" : string.Empty #>
<#
	}

	PopIndent();
#>
<#
	PushIndent(DefautIndent);

	foreach (var entityProperty in Entity.EntityProperties)
	{
		var relatedEntity = DomainModel.Entities.FirstOrDefault(x => x.Name == entityProperty.Type);
		var relatedEntityKey = relatedEntity != null ? relatedEntity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey) : null;
#>
<#
		if (relatedEntityKey != null)
		{
#>
[ForeignKey("<#= entityProperty.Name #><#= relatedEntityKey.Name #>")]
<#
		}
#>
public virtual <#= entityProperty.Type #><#= entityProperty.Required ? string.Empty : "?" #> <#= entityProperty.Name #> { get; set; } = null!;
<#
		if (relatedEntityKey != null)
		{
#>
public <#= relatedEntityKey.Type #><#= entityProperty.Required ? string.Empty : "?" #> <#= entityProperty.Name #><#= relatedEntityKey.Name #> { get; set; }<#= entityProperty.Required ? (entityProperty.Type == "string" ? " = null!;" : string.Empty) : " = null!;" #>
<#
		}
#>
<#
	}

	PopIndent();
#>
<#
	PushIndent(DefautIndent);

	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => !x.IsPrimaryKey))
	{
#>
public <#= primitiveProperty.Type #><#= primitiveProperty.Required ? string.Empty : "?" #> <#= primitiveProperty.Name #> { get; set; }<#= primitiveProperty.Required ? (primitiveProperty.Type == "string" ? " = null!;" : string.Empty) : " = null!;" #>
<#
	}

	PopIndent();

	if (relatedEntities.Any())
	{
#>

<#
		PushIndent(DefautIndent);

		foreach(var relatedEntity in relatedEntities)
		{
#>
public virtual ICollection<<#= relatedEntity.Name #>> <#= relatedEntity.Name #>s { get; set; }
<#
		}

		PopIndent();
	}
#>
}
<#
ClearIndent();
}
#>
}
