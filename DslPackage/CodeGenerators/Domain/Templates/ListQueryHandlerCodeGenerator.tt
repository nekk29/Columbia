<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var module = !string.IsNullOrEmpty(Entity.Module) ? Entity.Module : Entity.Name;
#>
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using <#= DomainModel.Domain #>.Queries.Base;
using <#= DomainModel.Dto #>.Base;
using <#= DomainModel.Dto #>.<#= module #>;
using <#= DomainModel.RepositoryAbstractions #>.Base;

namespace <#= DomainModel.Domain #>.Queries.<#= module #>
{
    public class List<#= Entity.Name #>QueryHandler(
        IMapper mapper,
        IRepository<Entity.<#= Entity.Name #>> <#= LowerFirst(Entity.Name) #>Repository
    ) : QueryHandlerBase<List<#= Entity.Name #>Query, IEnumerable<List<#= Entity.Name #>Dto>>(mapper)
    {
        protected override async Task<ResponseDto<IEnumerable<List<#= Entity.Name #>Dto>>> HandleQuery(List<#= Entity.Name #>Query request, CancellationToken cancellationToken)
        {
            var response = new ResponseDto<IEnumerable<List<#= Entity.Name #>Dto>>();
            var items = await <#= LowerFirst(Entity.Name) #>Repository.FindAll().ToListAsync(cancellationToken);
            var itemDtos = _mapper?.Map<IEnumerable<List<#= Entity.Name #>Dto>>(items);

            response.UpdateData(itemDtos ?? new List<List<#= Entity.Name #>Dto>());

            return await Task.FromResult(response);
        }
    }
}
