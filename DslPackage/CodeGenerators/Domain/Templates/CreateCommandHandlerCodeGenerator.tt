<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var module = !string.IsNullOrEmpty(Entity.Module) ? Entity.Module : Entity.Name;
#>
using AutoMapper;
using <#= DomainModel.Domain #>.Commands.Base;
using <#= DomainModel.RepositoryAbstractions #>.Base;
using <#= DomainModel.RepositoryAbstractions #>.Transactions;
using <#= DomainModel.Dto #>.Base;
using <#= DomainModel.Dto #>.<#= module #>;

namespace <#= DomainModel.Domain #>.Commands.<#= module #>
{
    public class Create<#= Entity.Name #>CommandHandler(
        IUnitOfWork unitOfWork,
        IMapper mapper,
        Create<#= Entity.Name #>CommandValidator validator,
        IRepository<Entity.<#= Entity.Name #>> <#= LowerFirst(Entity.Name) #>Repository
    ) : CommandHandlerBase<Create<#= Entity.Name #>Command, Get<#= Entity.Name #>Dto>(unitOfWork, mapper, validator)
    {
        public override async Task<ResponseDto<Get<#= Entity.Name #>Dto>> HandleCommand(Create<#= Entity.Name #>Command request, CancellationToken cancellationToken)
        {
            var response = new ResponseDto<Get<#= Entity.Name #>Dto>();
            var <#= LowerFirst(Entity.Name) #> = _mapper?.Map<Entity.<#= Entity.Name #>>(request.CreateDto);

            if (<#= LowerFirst(Entity.Name) #> != null)
            {
                await <#= LowerFirst(Entity.Name) #>Repository.AddAsync(<#= LowerFirst(Entity.Name) #>);
                await <#= LowerFirst(Entity.Name) #>Repository.SaveAsync();
            }

            var <#= LowerFirst(Entity.Name) #>Dto = _mapper?.Map<Get<#= Entity.Name #>Dto>(<#= LowerFirst(Entity.Name) #>);
            if (<#= LowerFirst(Entity.Name) #>Dto != null) response.UpdateData(<#= LowerFirst(Entity.Name) #>Dto);

            response.AddOkResult(Resources.Common.CreateSuccessMessage);

            return await Task.FromResult(response);
        }
    }
}
