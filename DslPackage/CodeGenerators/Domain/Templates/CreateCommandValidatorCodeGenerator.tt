<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var module = !string.IsNullOrEmpty(Entity.Module) ? Entity.Module : Entity.Name;
#>
using <#= DomainModel.Domain #>.Commands.Base;

namespace <#= DomainModel.Domain #>.Commands.<#= module #>
{
    public class Create<#= Entity.Name #>CommandValidator : CommandValidatorBase<Create<#= Entity.Name #>Command>
    {
        public Create<#= Entity.Name #>CommandValidator()
        {
            RequiredInformation(x => x.CreateDto)
                .DependentRules(() =>
                {
<#
	foreach (var entityProperty in Entity.EntityProperties)
	{
        if (!entityProperty.Required) continue;

		var relatedEntity = DomainModel.Entities.FirstOrDefault(x => x.Name == entityProperty.Type);
		var relatedEntityKey = relatedEntity != null ? relatedEntity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey) : null;
        
		if (relatedEntityKey != null)
		{
			var foreignKey = string.IsNullOrEmpty(entityProperty.ForeignKey) ? entityProperty.Name + relatedEntityKey.Name : entityProperty.ForeignKey;

            if (relatedEntityKey.Type == "string") {
#>
                    //RequiredString(x => x.CreateDto.<#= foreignKey #>, Resources.<#= Entity.Name #>.<#= foreignKey #>, {Min}, {Max});
<#
            } else {
#>
                    //RequiredField(x => x.CreateDto.<#= foreignKey #>, Resources.<#= Entity.Name #>.<#= foreignKey #>);
<#
            }
        }
	}
#>
<#
	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => !x.IsPrimaryKey))
	{
        if (!primitiveProperty.Required) continue;
        if (primitiveProperty.Type == "string") {
#>
                    //RequiredString(x => x.CreateDto.<#= primitiveProperty.Name #>, Resources.<#= Entity.Name #>.<#= primitiveProperty.Name #>, {Min}, {Max});
<#
        } else {
#>
                    //RequiredField(x => x.CreateDto.<#= primitiveProperty.Name #>, Resources.<#= Entity.Name #>.<#= primitiveProperty.Name #>);
<#
        }
	}
#>
                });
        }
    }
}
