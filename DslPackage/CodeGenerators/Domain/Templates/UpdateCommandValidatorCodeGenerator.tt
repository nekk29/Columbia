<#@ template language="C#" inherits="Columbia.DslPackage.CodeGenerators.Base.CodeGeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var keyProperty = Entity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey);
#>
using FluentValidation;
using Microsoft.EntityFrameworkCore;
using <#= DomainModel.Domain #>.Commands.Base;
using <#= DomainModel.RepositoryAbstractions #>.Base;

namespace <#= DomainModel.Domain #>.Commands.<#= Entity.Name #>
{
    public class Update<#= Entity.Name #>CommandValidator : CommandValidatorBase<Update<#= Entity.Name #>Command>
    {
        private readonly IRepository<Entity.<#= Entity.Name #>> _<#= LowerFirst(Entity.Name) #>Repository;

        public Update<#= Entity.Name #>CommandValidator(IRepository<Entity.<#= Entity.Name #>> <#= LowerFirst(Entity.Name) #>Repository)
        {
            _<#= LowerFirst(Entity.Name) #>Repository = <#= LowerFirst(Entity.Name) #>Repository;

            RequiredInformation(x => x.UpdateDto)
                .DependentRules(() =>
                {
<#
    if (keyProperty != null)
    {
#>
                    RuleFor(x => x.UpdateDto.<#= keyProperty.Name #>)
                        .MustAsync(ValidateExistenceAsync)
                        .WithCustomValidationMessage();
<#
    }
#>
<#
    if (Entity.PrimitiveProperties.Any(x => x.Required) || Entity.EntityProperties.Any(x => x.Required))
    {
#>

<#
    }
#>
<#
	foreach (var entityProperty in Entity.EntityProperties)
	{
        if (!entityProperty.Required) continue;

		var relatedEntity = DomainModel.Entities.FirstOrDefault(x => x.Name == entityProperty.Type);
		var relatedEntityKey = relatedEntity != null ? relatedEntity.PrimitiveProperties.FirstOrDefault(x => x.IsPrimaryKey) : null;
        
		if (relatedEntityKey != null)
		{
            if (relatedEntityKey.Type == "string") {
#>
                    //RequiredString(x => x.CreateDto.<#= entityProperty.Name #><#= relatedEntityKey.Name #>, Resources.<#= Entity.Name #>.<#= entityProperty.Name #><#= relatedEntityKey.Name #>, {Min}, {Max});
<#
            } else {
#>
                    //RequiredField(x => x.CreateDto.<#= entityProperty.Name #><#= relatedEntityKey.Name #>, Resources.<#= Entity.Name #>.<#= entityProperty.Name #><#= relatedEntityKey.Name #>);
<#
            }
        }
	}
#>
<#
	foreach (var primitiveProperty in Entity.PrimitiveProperties.Where(x => !x.IsPrimaryKey))
	{
        if (!primitiveProperty.Required) continue;
        if (primitiveProperty.Type == "string") {
#>
                    //RequiredString(x => x.CreateDto.<#= primitiveProperty.Name #>, Resources.<#= Entity.Name #>.<#= primitiveProperty.Name #>, {Min}, {Max});
<#
        } else {
#>
                    //RequiredField(x => x.CreateDto.<#= primitiveProperty.Name #>, Resources.<#= Entity.Name #>.<#= primitiveProperty.Name #>);
<#
        }
	}
#>
                });
        }
<#
    if (keyProperty != null)
    {
#>

        protected async Task<bool> ValidateExistenceAsync(Update<#= Entity.Name #>Command command, <#= keyProperty.Type #> <#= LowerFirst(keyProperty.Name) #>, ValidationContext<Update<#= Entity.Name #>Command> context, CancellationToken cancellationToken)
        {
            var exists = await _<#= LowerFirst(Entity.Name) #>Repository.FindAll().Where(x => x.<#= keyProperty.Name #> == <#= LowerFirst(keyProperty.Name) #>).AnyAsync(cancellationToken);
            if (!exists) return CustomValidationMessage(context, Resources.Common.UpdateRecordNotFound);
            return true;
        }
<#
    }
#>
    }
}
